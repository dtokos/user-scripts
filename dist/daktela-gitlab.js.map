{"version":3,"file":"daktela-gitlab.js","sources":["../src/daktela/gitlab/current.ts","../src/services/gitlab/gitlab.ts","../src/daktela/gitlab/cherry-picks.ts","../src/daktela/gitlab/parse.ts","../src/daktela/gitlab/comments.ts","../src/services/gitlab/ui/icons.ts","../src/services/gitlab/ui/margins.ts","../src/services/gitlab/ui/tooltip.ts","../src/services/gitlab/ui/buttons.ts","../src/services/gitlab/ui/modals.ts","../src/services/gitlab/ui/inputs.ts","../src/services/gitlab/ui/containers.ts","../src/services/gitlab/ui/links.ts","../src/services/gitlab/ui.ts","../src/daktela/gitlab/copy-modal.ts","../src/daktela/gitlab/render.ts","../src/daktela/gitlab/features/copy-commit-as-comment/feature.ts","../src/daktela/gitlab/features/copy-commit-as-comment/inject.ts","../src/daktela/gitlab/main.ts"],"sourcesContent":["import { ProjectRef, SHA } from '../../services/gitlab/types.ts';\n\nconst Current = {\n\tprojects: {\n\t\tref(): ProjectRef {\n\t\t\tconst matches = location.pathname.match(/^\\/?(.*)\\/-\\//);\n\n\t\t\tif (!matches) {\n\t\t\t\tthrow Error(`Could not parse project ref: ${location.pathname}`);\n\t\t\t}\n\n\t\t\treturn matches[1];\n\t\t},\n\t},\n\tcommits: {\n\t\tsha(): SHA {\n\t\t\tconst matches = location.pathname.match(/\\/-\\/commit\\/(\\w+)/);\n\n\t\t\tif (!matches) {\n\t\t\t\tthrow Error(`Could not parse commit SHA: ${location.pathname}`);\n\t\t\t}\n\n\t\t\treturn matches[1];\n\t\t},\n\t},\n} as const;\n\nexport default Current;\n","import { Branch, Comment, Commit, Ref, RefType, MergeRequest, ProjectRef, SHA } from './types.ts';\n\nconst BASE_URL = '/api/v4';\n\nconst GitLab = {\n\tcommits: {\n\t\tasync findBySHA(project: ProjectRef, sha: SHA): Promise<Commit> {\n\t\t\treturn get(`projects/${e(project)}/repository/commits/${sha}`);\n\t\t},\n\t\tasync refs(project: ProjectRef, sha: SHA, type: RefType|'all' = 'all'): Promise<Ref[]> {\n\t\t\treturn get(`projects/${e(project)}/repository/commits/${sha}/refs`, {type});\n\t\t},\n\t\tasync comments(project: ProjectRef, sha: SHA): Promise<Comment[]> {\n\t\t\treturn get(`projects/${e(project)}/repository/commits/${sha}/comments`);\n\t\t},\n\t\tasync mergeRequests(project: ProjectRef, sha: SHA): Promise<MergeRequest[]> {\n\t\t\treturn get(`projects/${e(project)}/repository/commits/${sha}/merge_requests`);\n\t\t},\n\t},\n\tbranches: {\n\t\tasync findByName(project: ProjectRef, name: string): Promise<Branch> {\n\t\t\treturn get(`projects/${e(project)}/repository/branches/${e(name)}`);\n\t\t},\n\t},\n} as const;\n\nfunction e(value: string|number|boolean): string {\n\treturn encodeURIComponent(value);\n}\n\nasync function get<TResponse>(endpoint: string, query: Record<string, string> = {}): Promise<TResponse> {\n\tconst url = new URL(`${BASE_URL}/${endpoint}`, location.origin);\n\tObject.entries(query)\n\t\t.forEach(([name, value]) => url.searchParams.append(name, value));\n\n\tlet response = await fetch(url);\n\n\treturn await response.json();\n}\n\nexport default GitLab;\n","import { Branch, Comment, ProjectRef, Ref, SHA } from '../../services/gitlab/types.ts';\nimport GitLab from '../../services/gitlab/gitlab.ts';\nimport { CommitWithBranch } from './types.ts';\n\nconst CherryPicks = {\n\tasync findRefs(project: ProjectRef, sha: SHA): Promise<CommitWithBranch<Ref[]>[]> {\n\t\tconst SHAs = await findSHAsForCommit(project, sha);\n\n\t\treturn Promise.all(\n\t\t\tSHAs.map(cherryPickSHA => this.findRef(project, cherryPickSHA))\n\t\t);\n\t},\n\tasync findRef(project: ProjectRef, sha: SHA): Promise<CommitWithBranch<Ref[]>> {\n\t\tconst [commit, branches] = await Promise.all([\n\t\t\tGitLab.commits.findBySHA(project, sha),\n\t\t\tGitLab.commits.refs(project, sha, 'branch'),\n\t\t]);\n\n\t\treturn {commit, branches};\n\t},\n\tasync deRefAll(project: ProjectRef, cherryPicks: CommitWithBranch<Ref>[]): Promise<CommitWithBranch<Branch>[]> {\n\t\treturn await Promise.all(\n\t\t\tcherryPicks.map(cherryPick => this.deRef(project, cherryPick))\n\t\t);\n\t},\n\tasync deRef(project: ProjectRef, cherryPick: CommitWithBranch<Ref>): Promise<CommitWithBranch<Branch>> {\n\t\tconst branch = await GitLab.branches.findByName(project, cherryPick.branch.name);\n\t\treturn {commit: cherryPick.commit, branch};\n\t},\n} as const;\n\nasync function findSHAsForCommit(project: ProjectRef, sha: SHA): Promise<SHA[]> {\n\tconst comments = await GitLab.commits.comments(project, sha);\n\treturn parseSHAsFromComments(comments);\n}\n\nfunction parseSHAsFromComments(comments: Comment[]): SHA[] {\n\treturn comments.reduce((SHAs, comment) => {\n\t\tconst matches = comment.note.match(/mentioned\\s+in\\s+commit\\s+(\\w+)/i);\n\n\t\tif (matches !== null) {\n\t\t\tSHAs.push(matches[1]);\n\t\t}\n\n\t\treturn SHAs;\n\t}, [] as SHA[]);\n}\n\nexport default CherryPicks;\n","import { Message } from './types.ts';\nimport { Commit } from '../../services/gitlab/types.ts';\n\nconst Parse = {\n\tmessage(commit: Commit): Message {\n\t\tconst message: Message = {title: '', body: '', ticket: undefined, extra: {}};\n\t\tconst lines = commit.message.split('\\n')\n\t\t\t.map(line => line.trim());\n\n\t\tskipEmptyLines(lines);\n\t\tmessage.title = parseTitle(lines);\n\t\tskipEmptyLines(lines);\n\n\t\twhile (lines.length) {\n\t\t\tprocessNextLine(message, lines);\n\t\t}\n\n\t\tmessage.body = message.body.trim();\n\n\t\treturn message;\n\t},\n} as const;\n\nfunction parseTitle(lines: string[]): string {\n\tconst title = lines.shift();\n\n\tif (title === undefined) {\n\t\tthrow Error('Could not parse commit title');\n\t}\n\n\treturn title.replace(/\\s*#\\s*\\d+\\s*$/, '');\n}\n\nfunction processNextLine(message: Message, lines: string[]): boolean {\n\treturn (\n\t\tskipCherryPicks(lines)\n\t\t|| collapseEmptyLines(message, lines)\n\t\t|| parseTicket(message, lines)\n\t\t|| parseExtra(message, lines)\n\t\t|| parseBody(message, lines)\n\t);\n}\n\nfunction skipEmptyLines(lines: string[]): boolean {\n\treturn skipWithPattern(lines, /^\\s*$/);\n}\n\nfunction skipCherryPicks(lines: string[]): boolean {\n\treturn skipWithPattern(lines, /\\(.*cherry.*picked.*\\)/i);\n}\n\nfunction skipWithPattern(lines: string[], pattern: RegExp): boolean {\n\tlet didSkip = false;\n\n\twhile (lines.length && lines[0].match(pattern)) {\n\t\tlines.shift();\n\t\tdidSkip = true;\n\t}\n\n\treturn didSkip;\n}\n\nfunction collapseEmptyLines(message: Message, lines: string[]): boolean {\n\tlet didCollapse = false;\n\n\tif (lines.length && lines[0].match(/^\\s*$/)) {\n\t\tmessage.body += '\\n';\n\t\tdidCollapse = true;\n\n\t\tskipEmptyLines(lines);\n\t}\n\n\treturn didCollapse;\n}\n\nfunction parseTicket(message: Message, lines: string[]): boolean {\n\tif (lines.length) {\n\t\tconst match = lines[0].match(/ticket\\s*:\\s*(http.*)/i);\n\n\t\tif (!match) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmessage.ticket = match[1].trim();\n\t\tlines.shift();\n\t}\n\n\treturn true;\n}\n\nfunction parseExtra(message: Message, lines: string[]) {\n\tif (lines.length) {\n\t\tconst match = lines[0].match(/^([^:]+):\\s*(http.*)/i);\n\n\t\tif (!match) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst key = match[1].trim();\n\t\tconst value = match[2].trim();\n\n\t\tmessage.extra[key] = message.extra[key] ?? [];\n\t\tmessage.extra[key].push(value);\n\n\t\tlines.shift();\n\t}\n\n\treturn true;\n}\n\nfunction parseBody(message: Message, lines: string[]): boolean {\n\tconst nextLine = lines.shift();\n\n\tif (nextLine !== undefined) {\n\t\tmessage.body += `${nextLine}\\n`\n\t}\n\n\treturn nextLine !== undefined;\n}\n\nexport default Parse;\n","import { ProjectRef, Ref, SHA } from '../../services/gitlab/types.ts';\nimport GitLab from '../../services/gitlab/gitlab.ts';\nimport Gitlab from '../../services/gitlab/gitlab.ts';\nimport CherryPicks from './cherry-picks.ts';\nimport { Base, Comment } from './types.ts';\nimport Parse from './parse.ts';\n\nconst Comments = {\n\tasync assembleBase(project: ProjectRef, sha: SHA): Promise<Base<Ref[]>> {\n\t\tconst commit = await GitLab.commits.findBySHA(project, sha);\n\n\t\tconst [\n\t\t\tbranches,\n\t\t\tcherryPicks,\n\t\t\tmergeRequests,\n\t\t] = await Promise.all([\n\t\t\tGitLab.commits.refs(project, commit.id, 'all'),\n\t\t\tCherryPicks.findRefs(project, commit.id),\n\t\t\tGitLab.commits.mergeRequests(project, commit.id),\n\t\t]);\n\n\t\treturn {commit, branches, cherryPicks, mergeRequests};\n\t},\n\tasync assembleComment(project: ProjectRef, base: Base<Ref>): Promise<Comment> {\n\t\tconst [branch, cherryPicks] = await Promise.all([\n\t\t\tGitlab.branches.findByName(project, base.branch.name),\n\t\t\tCherryPicks.deRefAll(project, base.cherryPicks),\n\t\t]);\n\t\tconst message = Parse.message(base.commit);\n\n\t\treturn {\n\t\t\tcommit: base.commit,\n\t\t\tbranch,\n\t\t\tcherryPicks,\n\t\t\tmergeRequests: base.mergeRequests,\n\t\t\ttitle: message.title,\n\t\t\tbody: message.body,\n\t\t\tticket: message.ticket,\n\t\t\textra: message.extra,\n\t\t};\n\t},\n\ttryAutoResolveBase(base: Base<Ref[]>): Base<Ref>|null {\n\t\tif (\n\t\t\tbase.branches.length > 1\n\t\t\t|| base.cherryPicks.some(cherryPick => cherryPick.branches.length > 1)\n\t\t) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.resolveBaseUsingFirst(base);\n\t},\n\tresolveBaseUsingFirst(base: Base<Ref[]>): Base<Ref> {\n\t\treturn {\n\t\t\tcommit: base.commit,\n\t\t\tbranch: base.branches[0],\n\t\t\tcherryPicks: base.cherryPicks.map(cherryPick => ({\n\t\t\t\tcommit: cherryPick.commit,\n\t\t\t\tbranch: cherryPick.branches[0],\n\t\t\t})),\n\t\t\tmergeRequests: base.mergeRequests,\n\t\t};\n\t},\n} as const;\n\nexport default Comments;\n","const icons = {\n\tdaktela(): HTMLImageElement {\n\t\tconst icon = document.createElement('img');\n\t\ticon.src = '/uploads/-/system/project/avatar/10/256x256.png';\n\t\ticon.style.width = '16px';\n\t\ticon.style.height = '16px';\n\t\ticon.style.transform = 'scale(1.5)';\n\n\t\treturn icon;\n\t},\n\tspinner(): HTMLSpanElement {\n\t\tconst spinner = document.createElement('span');\n\t\tspinner.classList.add('gl-spinner', 'gl-spinner-dark', 'gl-spinner-sm');\n\n\t\treturn spinner;\n\t},\n\tcheckCircle(): HTMLSpanElement {\n\t\tconst icon = wrappedSVGIcon('/assets/icons-7f1680a3670112fe4c8ef57b9dfb93f0f61b43a2a479d7abd6c83bcb724b9201.svg#status_success');\n\t\ticon.classList.add('ci-status-icon-success');\n\n\t\treturn icon;\n\t},\n\tcrossCircle(): HTMLSpanElement {\n\t\tconst icon = wrappedSVGIcon('/assets/icons-7f1680a3670112fe4c8ef57b9dfb93f0f61b43a2a479d7abd6c83bcb724b9201.svg#status_failed');\n\t\ticon.classList.add('ci-status-icon-failed');\n\n\t\treturn icon;\n\t},\n\tclose(): SVGSVGElement {\n\t\tconst icon = svgIcon('/assets/icons-7f1680a3670112fe4c8ef57b9dfb93f0f61b43a2a479d7abd6c83bcb724b9201.svg#close');\n\t\ticon.classList.add('gl-button-icon');\n\n\t\treturn icon;\n\t},\n\tclipboard(): SVGSVGElement {\n\t\tconst icon = svgIcon('/assets/icons-7f1680a3670112fe4c8ef57b9dfb93f0f61b43a2a479d7abd6c83bcb724b9201.svg#copy-to-clipboard');\n\t\ticon.classList.add('gl-icon');\n\n\t\treturn icon;\n\t}\n} as const;\n\nfunction wrappedSVGIcon(href: string): HTMLSpanElement {\n\tconst wrapper = document.createElement('span');\n\twrapper.appendChild(svgIcon(href));\n\n\treturn wrapper;\n}\n\nfunction svgIcon(href: string): SVGSVGElement {\n\tconst use = document.createElementNS('http://www.w3.org/2000/svg', 'use');\n\tuse.setAttribute('href', href);\n\n\tconst svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n\tsvg.classList.add('s16');\n\tsvg.appendChild(use);\n\n\treturn svg;\n}\n\nexport default icons;\n","const marginMap = {\n\t0: '0',\n\t1: '1',\n\t2: '2',\n\t3: '3',\n\t4: '4',\n\t5: '5',\n\t6: '6',\n\t7: '7',\n\t8: '8',\n} as const;\n\ntype Margin = keyof typeof marginMap;\n\nconst margins = {\n\tl(size: Margin): string {\n\t\treturn `gl-ml-${marginMap[size]}`;\n\t},\n\tr(size: Margin): string {\n\t\treturn `gl-mr-${marginMap[size]}`;\n\t},\n\tb(size: Margin): string {\n\t\treturn `gl-mb-${marginMap[size]}`;\n\t},\n} as const;\n\nexport default margins;\n","const placementMap = {\n\ttop: 'top',\n\tleft: 'left',\n\tright: 'right',\n\tbottom: 'bottom',\n} as const;\n\ntype Placement = keyof typeof placementMap;\n\nconst tooltip = {\n\tattach(element: HTMLElement, title: string, placement: Placement = 'top'): void {\n\t\telement.dataset.toggle = 'tooltip';\n\t\telement.dataset.title = title;\n\t\telement.dataset.placement = placement;\n\t\telement.dataset.container = 'body';\n\t},\n} as const;\n\nexport default tooltip;\n","import tooltip from './tooltip.ts';\nimport icons from './icons.ts';\nimport margins from './margins.ts';\n\nconst variantMap = {\n\t'default': 'btn-default',\n} as const;\n\nexport type Variant = keyof typeof variantMap;\n\ntype AsyncState = {\n\ticon: HTMLElement,\n\ttitle: string,\n\tdisabled: boolean,\n};\n\nconst buttons = {\n\tdefault(title: string = ''): HTMLButtonElement {\n\t\treturn this.make(title, 'default');\n\t},\n\tmake(title: string = '', variant: Variant = 'default'): HTMLButtonElement {\n\t\tconst button = document.createElement('button');\n\t\tbutton.textContent = title;\n\t\tbutton.classList.add('btn', 'gl-button', variantMap[variant]);\n\n\t\treturn button;\n\t},\n\tcopy(content: string): HTMLButtonElement {\n\t\tconst button = document.createElement('button');\n\t\tbutton.classList.add('btn', 'btn-clipboard', 'gl-button', 'btn-default-tertiary', 'btn-icon', 'btn-sm');\n\t\tbutton.dataset.clipboardText = content;\n\t\ttooltip.attach(button, 'Copy');\n\t\tbutton.appendChild(icons.clipboard());\n\n\t\treturn button;\n\t},\n\tasyncButton(icon: HTMLElement, title: string, onClick: () => Promise<void>) {\n\t\tconst duration = 1500;\n\n\t\tconst initialState: AsyncState = {icon, title, disabled: false};\n\n\t\tconst spinner = icons.spinner();\n\t\tspinner.classList.add(margins.r(3))\n\t\tconst loadingState: AsyncState = {icon: spinner, title: 'Loading...', disabled: true};\n\n\t\tconst checkCircle = icons.checkCircle();\n\t\tcheckCircle.classList.add(margins.r(3));\n\t\tconst successState: AsyncState = {icon: checkCircle, title: 'Success', disabled: true};\n\n\t\tconst crossCircle = icons.crossCircle();\n\t\tcrossCircle.classList.add(margins.r(3));\n\t\tconst errorState: AsyncState = {icon: crossCircle, title: 'Error', disabled: true};\n\n\t\tconst button = buttons.default();\n\t\tsetState(button, initialState);\n\n\t\tbutton.addEventListener('click', async () => {\n\t\t\tsetState(button, loadingState);\n\n\t\t\ttry {\n\t\t\t\tawait onClick();\n\t\t\t\tsetState(button, successState);\n\t\t\t\tsetTimeout(() => setState(button, initialState), duration);\n\t\t\t} catch (error) {\n\t\t\t\tsetState(button, errorState);\n\t\t\t\tsetTimeout(() => setState(button, initialState), duration);\n\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t});\n\n\t\treturn button;\n\t},\n} as const;\n\nfunction setState(button: HTMLButtonElement, state: AsyncState): void {\n\tbutton.innerHTML = '';\n\tbutton.appendChild(state.icon);\n\tbutton.insertAdjacentText('beforeend', state.title);\n\tbutton.disabled = state.disabled;\n}\n\nexport default buttons;\n","import icons from './icons.ts';\nimport buttons, { Variant as ButtonVariant } from './buttons.ts';\n\nexport type ModalBuilder = {\n\tsetTitle: (title: string) => ModalBuilder;\n\tsetBody: (body: HTMLElement) => ModalBuilder;\n\tappendBody: (body: HTMLElement) => ModalBuilder;\n\taddButton: (title: string, variant?: ButtonVariant) => ModalBuilder;\n\taddCloseButton: (title?: string) => ModalBuilder;\n\tbuild: () => Modal;\n};\n\nexport type Modal = {\n\topen: () => void;\n\tclose: () => void;\n};\n\ntype Config = {\n\ttitle: string,\n\tbody: HTMLElement[],\n\tbuttons: HTMLButtonElement[],\n};\n\nconst modals = {\n\tmake(): ModalBuilder {\n\t\tconst config: Config = {\n\t\t\ttitle: '',\n\t\t\tbody: [],\n\t\t\tbuttons: [],\n\t\t};\n\t\tlet element: HTMLDivElement|undefined = undefined;\n\n\t\treturn {\n\t\t\tsetTitle(title: string): ModalBuilder {\n\t\t\t\tconfig.title = title;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tsetBody(body: HTMLElement): ModalBuilder {\n\t\t\t\tconfig.body = [body];\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tappendBody(body: HTMLElement): ModalBuilder {\n\t\t\t\tconfig.body.push(body);\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\taddButton(title: string, variant: ButtonVariant = 'default'): ModalBuilder {\n\t\t\t\tconfig.buttons.push(buttons.make(title, variant));\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\taddCloseButton(title: string = 'Close'): ModalBuilder {\n\t\t\t\tconst button = buttons.default(title);\n\t\t\t\tbutton.dataset.dismiss = 'modal';\n\t\t\t\tconfig.buttons.push(button);\n\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tbuild(): Modal {\n\t\t\t\treturn {\n\t\t\t\t\topen(): void {\n\t\t\t\t\t\telement = buildModal(config);\n\t\t\t\t\t\t$(element).on('hidden.bs.modal', event => event.target.remove());\n\t\t\t\t\t\tdocument.body.appendChild(element);\n\n\t\t\t\t\t\t$(element).modal('show');\n\t\t\t\t\t},\n\t\t\t\t\tclose(): void {\n\t\t\t\t\t\tif (element !== undefined) {\n\t\t\t\t\t\t\t$(element).modal('hide');\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t},\n\t\t};\n\t},\n} as const;\n\nfunction buildModal(config: Config): HTMLDivElement {\n\tconst content = document.createElement('div');\n\tcontent.classList.add('modal-content');\n\tcontent.appendChild(buildHeader(config));\n\tcontent.appendChild(buildBody(config));\n\tcontent.appendChild(buildFooter(config));\n\n\tconst dialog = document.createElement('div');\n\tdialog.classList.add('modal-dialog');\n\tdialog.appendChild(content);\n\n\tconst modal = document.createElement('div');\n\tmodal.classList.add('modal', 'fade', 'gl-modal');\n\tmodal.appendChild(dialog);\n\n\treturn modal;\n}\n\nfunction buildHeader(config: Config): HTMLDivElement {\n\tconst title = document.createElement('h4');\n\ttitle.classList.add('modal-title');\n\ttitle.textContent = config.title;\n\n\tconst close = document.createElement('button');\n\tclose.classList.add('btn', 'btn-default', 'btn-sm', 'gl-button', 'btn-default-tertiary', 'btn-icon');\n\tclose.dataset.dismiss = 'modal';\n\tclose.appendChild(icons.close());\n\n\tconst header = document.createElement('div');\n\theader.classList.add('modal-header');\n\theader.appendChild(title);\n\theader.appendChild(close);\n\n\treturn header;\n}\n\nfunction buildBody(config: Config): HTMLDivElement {\n\tconst body = document.createElement('div');\n\tbody.classList.add('modal-body');\n\tconfig.body.forEach(element => body.appendChild(element));\n\n\treturn body;\n}\n\nfunction buildFooter(config: Config): HTMLDivElement {\n\tconst footer = document.createElement('div');\n\tfooter.classList.add('modal-footer');\n\tconfig.buttons.forEach(button => footer.appendChild(button));\n\n\treturn footer;\n}\n\nexport default modals;\n","const inputs = {\n\ttextArea(value: string = '', readOnly: boolean = false): HTMLTextAreaElement {\n\t\tconst textArea = document.createElement('textarea');\n\t\ttextArea.classList.add('gl-form-input', 'gl-form-textarea', 'form-control');\n\t\ttextArea.value = value;\n\t\ttextArea.readOnly = readOnly;\n\n\t\treturn textArea;\n\t},\n} as const;\n\nexport default inputs;\n","const containers = {\n\tjustifyBetween(...children: HTMLElement[]): HTMLDivElement {\n\t\tconst container = document.createElement('div');\n\t\tcontainer.classList.add('gl-display-flex', 'gl-justify-content-space-between');\n\t\tchildren.forEach(child => container.appendChild(child));\n\n\t\treturn container;\n\t},\n} as const;\n\nexport default containers;\n","const links = {\n\texternal(href: string, title: string|undefined = undefined) {\n\t\tconst anchor = document.createElement('a');\n\t\tanchor.href = href;\n\t\tanchor.textContent = title ?? href;\n\t\tanchor.target = '_blank';\n\t\tanchor.rel = 'noreferrer noopener';\n\n\t\treturn anchor;\n\t},\n} as const;\n\nexport default links;\n","import icons from './ui/icons.ts';\nimport margins from './ui/margins.ts';\nimport buttons from './ui/buttons.ts';\nimport tooltip from './ui/tooltip.ts';\nimport modals from './ui/modals.ts';\nimport inputs from './ui/inputs.ts';\nimport containers from './ui/containers.ts';\nimport links from './ui/links.ts';\n\nconst UI = {\n\tmargins,\n\ticons,\n\ttooltip,\n\tcontainers,\n\tbuttons,\n\tlinks,\n\tinputs,\n\tmodals,\n} as const;\n\nexport default UI;\n","import UI from '../../services/gitlab/ui.ts';\n\nfunction openCopyModal(content: string, description: HTMLElement|undefined = undefined): void {\n\tconst container = UI.containers.justifyBetween(\n\t\tbuildDescription(description),\n\t\tUI.buttons.copy(content),\n\t);\n\tcontainer.classList.add(UI.margins.b(2));\n\n\tconst modal = UI.modals.make()\n\t\t.setTitle('Copy')\n\t\t.appendBody(container)\n\t\t.appendBody(UI.inputs.textArea(content, true))\n\t\t.addCloseButton()\n\t\t.build();\n\n\tmodal.open();\n}\n\nfunction buildDescription(content: HTMLElement|undefined): HTMLDivElement {\n\tconst wrapper = document.createElement('div');\n\n\tif (content !== undefined) {\n\t\twrapper.appendChild(content);\n\t}\n\n\treturn wrapper;\n}\n\nexport default openCopyModal;\n","import { Comment, CommitWithBranch } from './types.ts';\nimport { Branch, Commit } from '../../services/gitlab/types.ts';\n\n// noinspection SpellCheckingInspection\nconst BODY_FONTS = [\n\t'Menlo',\n\t'\\'DejaVu Sans Mono\\'',\n\t'\\'Liberation Mono\\'',\n\t'Consolas',\n\t'\\'Ubuntu Mono\\'',\n\t'\\'Courier New\\'',\n\t'\\'andale mono\\'',\n\t'\\'lucida console\\'',\n\t'monospace'\n].join(', ');\n\nconst BODY_STYLES = [\n\t`font-family:${BODY_FONTS}`,\n\t'font-size:0.8125rem',\n\t'margin-top:8px',\n\t'margin-bottom:8px',\n\t'color:#999999',\n\t'padding:8px 0 8px 8px',\n\t'border-width:0 0 0 3px',\n\t'border-style:none none none solid',\n\t'border-color:#444444',\n].join(';');\n\nfunction render(comment: Comment): string {\n\treturn (\n\t\trenderTitle(comment)\n\t\t+ renderCommits(comment)\n\t\t+ renderMergeRequests(comment)\n\t\t+ renderExtra(comment)\n\t\t+ renderBody(comment)\n\t);\n}\n\nfunction renderTitle(comment: Comment): string {\n\treturn `<p><strong>${comment.title}</strong></p>`;\n}\n\nfunction renderCommits(comment: Comment): string {\n\treturn renderListWithTitle('Commits', renderCBs([comment as CommitWithBranch<Branch>].concat(comment.cherryPicks)));\n}\n\nfunction renderCBs(cbs: CommitWithBranch<Branch>[]): string[] {\n\treturn cbs.map(cb => `${renderBranch(cb.branch)} ${renderCommit(cb.commit)}`);\n}\n\nfunction renderBranch(branch: Branch): string {\n\treturn renderAnchor(branch.name, branch.web_url);\n}\n\nfunction renderCommit(commit: Commit): string {\n\treturn renderAnchor(commit.web_url, commit.web_url);\n}\n\nfunction renderMergeRequests(comment: Comment): string {\n\treturn renderListWithTitle('Merge requests', comment.mergeRequests.map(mr => linkify(mr.web_url)));\n}\n\nfunction renderExtra(comment: Comment): string {\n\treturn Object.entries(comment.extra)\n\t\t.reduce((html, [name, values]) => {\n\t\t\treturn html + renderListWithTitle(name, linkifyAll(values), true);\n\t\t}, '');\n}\n\nfunction renderBody(comment: Comment): string {\n\tif (comment.body === '') {\n\t\treturn '';\n\t}\n\n\treturn (\n\t\t`<p>Notes (copied from commit message):</p>`\n\t\t+ `<pre style=\"${BODY_STYLES}\">${comment.body}</pre>`\n\t);\n}\n\nfunction renderListWithTitle(title: string, items: string[], allowCollapse: boolean = false): string {\n\tif (!items.length) {\n\t\treturn '';\n\t}\n\n\tif (items.length === 1 && allowCollapse) {\n\t\treturn `<p>${title}: ${items[0]}</p>`;\n\t}\n\n\treturn (\n\t\t`<p>${title}:</p>`\n\t\t+ renderList(items)\n\t);\n}\n\nfunction renderList(items: string[]): string {\n\treturn `<ul>${items.map(item => `<li>${item}</li>`).join('')}</ul>`;\n}\n\nfunction renderAnchor(title: string, url: string): string {\n\treturn `<a href=\"${url}\" target=\"_blank\" rel=\"noreferrer noopener\">${title}</a>`;\n}\n\nfunction linkifyAll(values: string[]): string[] {\n\treturn values.map(linkify);\n}\n\nfunction linkify(value: string): string {\n\ttry {\n\t\treturn renderAnchor(value, new URL(value).toString());\n\t} catch {\n\t\treturn value;\n\t}\n}\n\nexport default render;\n","import { ProjectRef, SHA } from '../../../../services/gitlab/types.ts';\nimport Comments from '../../comments.ts';\nimport { Comment } from '../../types.ts';\nimport openCopyModal from '../../copy-modal.ts';\nimport render from '../../render.ts';\nimport UI from '../../../../services/gitlab/ui.ts';\n\nasync function copyCommitAsComment(project: ProjectRef, commit: SHA): Promise<void> {\n\tconst base = await Comments.assembleBase(project, commit);\n\t//const autoResolvedBase = Comments.tryAutoResolveBase(base);\n\tconst autoResolvedBase = Comments.resolveBaseUsingFirst(base);\n\n\tif (autoResolvedBase !== null) {\n\t\tconst comment = await Comments.assembleComment(project, autoResolvedBase);\n\t\topenCopy(comment);\n\t} else {\n\t\t// TODO: Implement modal\n\t\tthrow Error('Comment could not be auto-resolved');\n\t}\n}\n\nfunction openCopy(comment: Comment): void {\n\topenCopyModal(render(comment), ticketDescription(comment));\n}\n\nfunction ticketDescription(comment: Comment): HTMLSpanElement|undefined {\n\tif (!comment.ticket) {\n\t\treturn undefined;\n\t}\n\n\tconst span = document.createElement('span');\n\tspan.textContent = 'Ticket: ';\n\tspan.appendChild(UI.links.external(comment.ticket));\n\n\treturn span;\n}\n\nexport default copyCommitAsComment;\n","import Current from '../../current.ts';\nimport copyCommitAsComment from './feature.ts';\nimport { ProjectRef, SHA } from '../../../../services/gitlab/types.ts';\nimport UI from '../../../../services/gitlab/ui.ts';\n\nfunction inject(): void {\n\tinjectOnCommitDetailPage();\n\tinjectToProjectLastCommit()\n}\n\nfunction injectOnCommitDetailPage(): void {\n\ttry {\n\t\tconst header = document.querySelector('.page-content-header');\n\n\t\tif (!header) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ref = Current.projects.ref();\n\t\tconst sha = Current.commits.sha();\n\n\t\tconst button = makeButton(ref, sha);\n\t\tbutton.classList.add(UI.margins.l(3));\n\n\t\theader.appendChild(button);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n}\n\nfunction injectToProjectLastCommit(): void {\n\ttry {\n\t\tconst group = document.querySelector([\n\t\t\t'.project-last-commit .js-commit-sha-group',\n\t\t\t'.blob-commit-info .commit-sha-group',\n\t\t].join(', '));\n\n\t\tif (!group) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shaElement = group.querySelector('[data-clipboard-text]');\n\n\t\tif (!shaElement || !(shaElement instanceof HTMLElement)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ref = Current.projects.ref();\n\t\tconst sha = shaElement.dataset.clipboardText ?? '';\n\n\t\tgroup.appendChild(makeButton(ref, sha));\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n}\n\nfunction makeButton(ref: ProjectRef, sha: SHA): HTMLButtonElement {\n\tconst icon = UI.icons.daktela();\n\ticon.classList.add(UI.margins.r(3));\n\n\treturn UI.buttons.asyncButton(icon, 'Daktela comment', async () => {\n\t\tawait copyCommitAsComment(ref, sha);\n\t});\n}\n\nexport default inject;\n","import injectCopyCommitAsComment from './features/copy-commit-as-comment/inject.ts';\n\ninjectCopyCommitAsComment();\n"],"names":["Current","matches","BASE_URL","GitLab","project","sha","get","e","type","name","value","endpoint","query","url","CherryPicks","SHAs","findSHAsForCommit","cherryPickSHA","commit","branches","cherryPicks","cherryPick","branch","comments","parseSHAsFromComments","comment","Parse","message","lines","line","skipEmptyLines","parseTitle","processNextLine","title","skipCherryPicks","collapseEmptyLines","parseTicket","parseExtra","parseBody","skipWithPattern","pattern","didSkip","didCollapse","match","key","nextLine","Comments","mergeRequests","base","Gitlab","icons","icon","spinner","wrappedSVGIcon","svgIcon","href","wrapper","use","svg","marginMap","margins","size","tooltip","element","placement","variantMap","buttons","variant","button","content","onClick","initialState","loadingState","checkCircle","successState","crossCircle","errorState","setState","error","state","modals","config","body","buildModal","event","buildHeader","buildBody","buildFooter","dialog","modal","close","header","footer","inputs","readOnly","textArea","containers","children","container","child","links","anchor","UI","openCopyModal","description","buildDescription","BODY_FONTS","BODY_STYLES","render","renderTitle","renderCommits","renderMergeRequests","renderExtra","renderBody","renderListWithTitle","renderCBs","cbs","cb","renderBranch","renderCommit","renderAnchor","linkify","mr","html","values","linkifyAll","items","allowCollapse","renderList","item","copyCommitAsComment","autoResolvedBase","openCopy","ticketDescription","span","inject","injectOnCommitDetailPage","injectToProjectLastCommit","ref","makeButton","group","shaElement","injectCopyCommitAsComment"],"mappings":"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"}